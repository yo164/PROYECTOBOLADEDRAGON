{
  "version": 3,
  "sources": ["../../rxjs/src/internal/operators/partition.ts", "../../rxjs/src/internal/operators/race.ts"],
  "sourcesContent": ["import { not } from '../util/not';\r\nimport { filter } from './filter';\r\nimport { Observable } from '../Observable';\r\nimport { UnaryFunction } from '../types';\r\n\r\n/**\r\n * Splits the source Observable into two, one with values that satisfy a\r\n * predicate, and another with values that don't satisfy the predicate.\r\n *\r\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\r\n * one like the output of {@link filter}, and the other with values that did not\r\n * pass the condition.</span>\r\n *\r\n * ![](partition.png)\r\n *\r\n * `partition` outputs an array with two Observables that partition the values\r\n * from the source Observable through the given `predicate` function. The first\r\n * Observable in that array emits source values for which the predicate argument\r\n * returns true. The second Observable emits source values for which the\r\n * predicate returns false. The first behaves like {@link filter} and the second\r\n * behaves like {@link filter} with the predicate negated.\r\n *\r\n * ## Example\r\n *\r\n * Partition click events into those on DIV elements and those elsewhere\r\n *\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { partition } from 'rxjs/operators';\r\n *\r\n * const div = document.createElement('div');\r\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\r\n * document.body.appendChild(div);\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const [clicksOnDivs, clicksElsewhere] = clicks.pipe(partition(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\r\n *\r\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\r\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\r\n * ```\r\n *\r\n * @see {@link filter}\r\n *\r\n * @param predicate A function that evaluates each value emitted by the source\r\n * Observable. If it returns `true`, the value is emitted on the first Observable\r\n * in the returned array, if `false` the value is emitted on the second Observable\r\n * in the array. The `index` parameter is the number `i` for the i-th source\r\n * emission that has happened since the subscription, starting from the number `0`.\r\n * @param thisArg An optional argument to determine the value of `this` in the\r\n * `predicate` function.\r\n * @return A function that returns an array with two Observables: one with\r\n * values that passed the predicate, and another with values that did not pass\r\n * the predicate.\r\n * @deprecated Replaced with the {@link partition} static creation function. Will be removed in v8.\r\n */\r\nexport function partition<T>(\r\n  predicate: (value: T, index: number) => boolean,\r\n  thisArg?: any\r\n): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\r\n  return (source: Observable<T>) =>\r\n    [filter(predicate, thisArg)(source), filter(not(predicate, thisArg))(source)] as [Observable<T>, Observable<T>];\r\n}\r\n", "import { ObservableInputTuple, OperatorFunction } from '../types';\r\nimport { argsOrArgArray } from '../util/argsOrArgArray';\r\nimport { raceWith } from './raceWith';\r\n\r\n/** @deprecated Replaced with {@link raceWith}. Will be removed in v8. */\r\nexport function race<T, A extends readonly unknown[]>(otherSources: [...ObservableInputTuple<A>]): OperatorFunction<T, T | A[number]>;\r\n/** @deprecated Replaced with {@link raceWith}. Will be removed in v8. */\r\nexport function race<T, A extends readonly unknown[]>(...otherSources: [...ObservableInputTuple<A>]): OperatorFunction<T, T | A[number]>;\r\n\r\n/**\r\n * Returns an Observable that mirrors the first source Observable to emit a next,\r\n * error or complete notification from the combination of this Observable and supplied Observables.\r\n * @param args Sources used to race for which Observable emits first.\r\n * @return A function that returns an Observable that mirrors the output of the\r\n * first Observable to emit an item.\r\n * @deprecated Replaced with {@link raceWith}. Will be removed in v8.\r\n */\r\nexport function race<T>(...args: any[]): OperatorFunction<T, unknown> {\r\n  return raceWith(...argsOrArgArray(args));\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDM,SAAU,UACd,WACA,SAAa;AAEb,SAAO,SAAC,QAAqB;AAC3B,WAAA,CAAC,OAAO,WAAW,OAAO,EAAE,MAAM,GAAG,OAAO,IAAI,WAAW,OAAO,CAAC,EAAE,MAAM,CAAC;EAA5E;AACJ;;;AC5CM,SAAU,OAAI;AAAI,MAAA,OAAA,CAAA;WAAA,KAAA,GAAA,KAAA,UAAA,QAAA,MAAc;AAAd,SAAA,EAAA,IAAA,UAAA,EAAA;;AACtB,SAAO,SAAQ,MAAA,QAAA,cAAA,CAAA,GAAA,OAAI,eAAe,IAAI,CAAC,CAAA,CAAA;AACzC;",
  "names": []
}
